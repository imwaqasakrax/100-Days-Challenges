import math

def paint_calc(height, width, cover):
    area = height * width
    num_of_cans = math.ceil(area / cover)
    print(f"Number of cans required: {num_of_cans}")

test_h = int(input("Height of wall: "))
test_w = int(input("Width of wall: "))

coverage = 5

paint_calc(height=test_h, width=test_w, cover=coverage)
-----------------------------------------------------------------------------------------------
def prime_checker(number):
    is_prime = True
    for i in range(2, int(number ** 0.5) + 1):
        if number % i == 0:
            is_prime = False
            break
    if is_prime and number > 1:
        print("The number is prime")
    else:
        print("The number is not prime")
n = int(input("Check this number: "))
prime_checker(number=n)
-------------------------------------------------------------------------------------------------
alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']

direction = input("Type 'encode' to encrypt, type 'decode' to decrypt:\n")
text = input("Type your message:\n").lower()
shift = int(input("Type the shift number:\n"))

def encrypt(plain_text, shift_amount):
  cipher_text = ""
  for letter in plain_text:
    position = alphabet.index(letter)
    new_position = position + shift_amount
    cipher_text += alphabet[new_position]
  print(f"The encoded text is {cipher_text}")
def decrypt(cipher_text, shift_amount):
  plain_text = ""
  for letter in cipher_text:
    position = alphabet.index(letter)
    new_position = position - shift_amount
    plain_text += alphabet[new_position]
  print(f"The decoded text is {plain_text}")
if direction == "encode":
  encrypt(plain_text=text, shift_amount=shift)
elif direction == "decode":
  decrypt(cipher_text=text, shift_amount=shift)
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def spacex_to_earth_time(minutes, seconds):
    # Conversion ratio: 1 SpaceX minute = 3 Earth minutes
    conversion_ratio = 1 / 3  # Earth minutes per SpaceX minute
    
    # Convert input SpaceX time into total SpaceX seconds
    total_spacex_seconds = minutes * 60 + seconds
    
    # Convert SpaceX seconds to Earth seconds using the ratio
    total_earth_seconds = total_spacex_seconds * conversion_ratio
    
    # Convert Earth seconds to Earth minutes and round to the nearest integer
    earth_minutes = round(total_earth_seconds / 60)
    
    return earth_minutes

# Example usage:
print(spacex_to_earth_time(1000, 20))  # Output: 334
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
class Solution:
    def minimumBottles(self, gallons):
        # Calculate the total gallons
        total_gallons = sum(gallons)
        
        # Count the number of '1's in the binary representation of total_gallons
        min_bottles = bin(total_gallons).count('1')
        
        return min_bottles

# Test cases
solution = Solution()

# Example 1
gallons1 = [10, 7]
print(f"Gallons: {gallons1}, Minimum Bottles: {solution.minimumBottles(gallons1)}")  # Output: 2

# Example 2
gallons2 = [10, 7, 5]
print(f"Gallons: {gallons2}, Minimum Bottles: {solution.minimumBottles(gallons2)}")  # Output: 3

# Example 3
gallons3 = [5, 3]
print(f"Gallons: {gallons3}, Minimum Bottles: {solution.minimumBottles(gallons3)}")  # Output: 2

