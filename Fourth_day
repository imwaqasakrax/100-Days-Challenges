                                                                Program 4.1
You are going to write a virtual coin toss program. It will randomly tell the user "Heads" or "Tails".
Important, the first letter should be capitalised and spelt exactly like in the example e.g. Heads, not heads.
There are many ways of doing this. But to practice what we learnt in the last lesson, you should generate a random number, either 0 or 1. Then use that number to print out Heads or Tails.
e.g. 1 means Heads 0 means Tails

import random	 
test_seed = int(input("Create a seed number: "))
random.seed(test_seed)
random_side = random.randint(0, 1)
if random_side == 1:
  print("Heads")
else:
  print("Tails")

..........................................................................................................................................................................

                                                                  Program 4.2

You are going to write a program that will select a random name from a list of names. The person selected will have to pay for everybody's food bill.
Important: You are not allowed to use the choice() function.
splits the string names_string into individual names and puts them inside a List called names. For this to work, you must enter all the n

import random
names_string = input("Give me everybody's names, separated by a comma. \n")
names = names_string.split(", ")
name_count = len(names)
random_index = random.randint(0, name_count - 1)
random_name = names[random_index]
print(random_name + " is going to buy the meal today!")
..........................................................................................................................................................................

                                                                  Program 4.3
You are going to write a program that will mark a spot with an X.
In the starting code, you will find a variable called map.
This map contains a nested list. When map is printed this is what the nested list looks like:
[['⬜️', '⬜️', '⬜️'],['⬜️', '⬜️', '⬜️'],['⬜️', '⬜️', '⬜️']]
This is a bit hard to work with. So on lines 6 and 23, we've used this line of code print(f"{row1}\n{row2}\n{row3}" 
to format the 3 lists to be printed as a 3 by 3 square, each on a new line. 
['⬜️', '⬜️', '⬜️']
['⬜️', '⬜️', '⬜️']
['⬜️', '⬜️', '⬜️']
Now it looks a bit more like the coordinates of a real map:

row1 = ["⬜️","️⬜️","️⬜️"]
row2 = ["⬜️","⬜️","️⬜️"]
row3 = ["⬜️️","⬜️️","⬜️️"]
map = [row1, row2, row3]
print(f"{row1}\n{row2}\n{row3}")
position = input("Where do you want to put the treasure? ")
horizontal = int(position[0])
vertical = int(position[1])
map[vertical - 1][horizontal - 1] = "X"
print(f"{row1}\n{row2}\n{row3}")
